#!/bin/sh

# Source PX4 alias commands (px4-alias.sh should be in the PATH)
. px4-alias.sh

set LOGGER_ARGS ""
set LOGGER_BUF 8

# ver all
ver all

# Select and import parameters from the specified BSON file
# param import /fs/mtd_params # PX4
set PARAM_FILE "parameters.bson"
param select $PARAM_FILE
if ! param import
then
    echo "\tERROR [init] param import failed"
fi

if param greater SYS_AUTOCONFIG 0; then
    param reset_all SYS_AUTOSTART RC* CAL_* COM_FLTMODE* LND_FLIGHT* TC_* COM_FLIGHT*
    echo "\tWARN [param] parameters reset!"
fi

# Required by QGroundCountrol
echo "\tINFO [flight_mode] setting COM_FLTMODE*"
param set-default COM_FLTMODE1 0
param set-default COM_FLTMODE2 -1
param set-default COM_FLTMODE3 -1
param set-default COM_FLTMODE4 1
param set-default COM_FLTMODE5 -1
param set-default COM_FLTMODE6 2


######## /etc/init.d/rc.board_arch_defaults
echo "\tINFO [init] setting board_arch_defaults"
param set-default EKF2_MULTI_IMU 0
param set-default SENS_IMU_MODE 1
set LOGGER_BUF 8
if param greater -s UAVCAN_ENABLE 1
then
    set LOGGER_BUF 6
fi
############


######### /etc/init.d/rc.board_defaults
echo "\tINFO [init] setting board_defaults"
# Disable the power supply check
param set CBRK_SUPPLY_CHK 894281
# param set-default BAT1_V_DIV 10.177939394
# param set-default BAT1_A_PER_V 15.391030303
# Set the default battery voltage divider ratio
param set-default BAT1_V_DIV 5.7
#######################################

# Disable automatic configuration to retain the current settings
#param set SYS_AUTOCONFIG 0

# Set the autostart configuration profile
# /etc/init.d/rc.autostart
param set SYS_AUTOSTART 4017 # NXP drone hover games
# /etc/init.d/airframes/4017_nxp_hovergames
echo "\tINFO [init] setting airframe and mc_defaults"
## . ${R}etc/init.d/rc.mc_defaults
set VEHICLE_TYPE mc
param set-default MAV_TYPE 2
if param compare IMU_GYRO_RATEMAX 400
then
param set-default IMU_GYRO_RATEMAX 800
fi
param set-default NAV_ACC_RAD 2
param set-default RTL_RETURN_ALT 6
param set-default RTL_DESCEND_ALT 10
param set-default GPS_UBX_DYNMODEL 6
## end rc.mc_defaults
param set-default IMU_DGYRO_CUTOFF 20
param set-default MC_ROLLRATE_P 0.18
param set-default MC_ROLLRATE_I 0.15
param set-default MC_PITCHRATE_P 0.18
param set-default MC_PITCHRATE_I 0.15
param set-default CA_ROTOR_COUNT 4
param set-default CA_ROTOR0_PX 0.15
param set-default CA_ROTOR0_PY 0.15
param set-default CA_ROTOR1_PX -0.15
param set-default CA_ROTOR1_PY -0.15
param set-default CA_ROTOR2_PX 0.15
param set-default CA_ROTOR2_PY -0.15
param set-default CA_ROTOR2_KM -0.05
param set-default CA_ROTOR3_PX -0.15
param set-default CA_ROTOR3_PY 0.15
param set-default CA_ROTOR3_KM -0.05
## end /etc/init.d/airframes/4017_nxp_hovergames

# Start data management service for mission and geofence data
dataman start
send_event start
# Start CPU load monitoring service
load_mon start

# Initialize RC (Remote Control) input on specified device
rc_input start -d /dev/ttyAMA0
# RC update (map raw RC input to calibrate manual control)
#  start before commander
rc_update start
manual_control start

#### SENSORS ################################
echo "\tINFO [init] initializing sensors"
# Start barometric pressure sensor
if ! ms5611 start -I; then
    echo "\tERROR [init] failed to initialize barometer ms5611"
fi

# Start ADC (Analog-to-Digital Converter)
# ads1115 #0 on I2C bus 1 (external) address 0x48
if ! ads1115 start -I 1 -a 72; then
    echo "\tERROR [init] failed to initialize ADC ads1115"
fi

# Start internal IMU sensor, fallback to alternative if needed
#if ! icm42688p start -q -s -R 0; then
if ! icm42688p start -q -s -R 4; then
	# Fallback to ICM42605 if ICM42688P fails
	#icm42605 start -s -R 4
    echo "\tWARN [init] failed to initialize IMU icm42688p; fallback"
    if ! icm42605 start -s -R 4; then
	echo "\tERROR [init] failed to initialize IMU icm42605"
    fi
fi

# Start internal magnetometer sensor, fallback to alternative if needed
echo "\tINFO [init] Starting internal magnetometer"
ist8310 start -q -I -a 15 -R 4
echo "\tINFO [init] Starting external magnetometer"
if ! ist8310 start -q -X 0 -a 14 -R 0; then
	# Fallback to QMC5883L if IST8310 fails
	qmc5883l start -I -R 6
fi
#################################

# Start battery status monitoring service
battery_status start

# Start sensor data processing service
sensors start

# Start the main state machine of the flight controller
commander start
# Start PWM output driver and control allocator
pca9685_pwm_out start

############# /etc/init.d/rc.vehicle_setup
echo "\tINFO [init] vehicle_setup and mc_apps"
#if [ $VEHICLE_TYPE = mc ]
#then
# . ${R}etc/init.d/rc.mc_apps
## rc.mc_apps
# SYS_MC_EST_GROUP 2
param set SYS_MC_EST_GROUP 2
ekf2 start &
control_allocator start
mc_rate_control start
mc_att_control start
mc_hover_thrust_estimator start
flight_mode_manager start
mc_pos_control start
land_detector start multicopter
## end rc.mc_apps
#fi
#########################################


################### Serial ###################
echo "\tINFO [init] serial"
# Start external GPS module with specified settings
#echo "Starting Main GPS on $SERIAL_DEV"
#gps start -d ${SERIAL_DEV} -b p:${BAUD_PARAM} ${DUAL_GPS_ARGS}
#gps start -d /dev/ttySC0 -i uart -p ubx
gps start -d /dev/ttySC0 -i uart -p:57600 ubx

# Start Mavlink communication on UDP port 14556
# [-x]        Enable FTP
# [-r <val>]  Maximum sending data rate in B/s (if 0, use baudrate / 20)
#            default: 0
#[-p]        Enable Broadcast
#[-u <val>]  Select UDP Network Port (local)
#            default: 14556
#mavlink start -x -u 14556 -r 1000000 -p

# Start Mavlink communication on specified serial device for Telemetry
# [-Z]        Force hardware flow control always off
# [-x]        Enable FTP
# [-d <val>]  Select Serial Device
#                 values: <file:dev>, default: /dev/ttyS1
mavlink start -x -Z -d /dev/ttySC1
#mavlink start -x -d /dev/ttySC1
#################################################

# Start high-level navigation tasks
navigator start

# ============ Logging
echo "\tINFO [init] logging"
# Log file from start until shutdown
param set SDLOG_MODE 0
#set LOGGER_BUF 200

# ${R}etc/init.d/rc.logging
if param compare SDLOG_MODE 1
then
    set LOGGER_ARGS "${LOGGER_ARGS} -e"
fi
if param compare SDLOG_MODE 2
then
    set LOGGER_ARGS "${LOGGER_ARGS} -f"
fi
if param compare SDLOG_MODE 3
then
    set LOGGER_ARGS "${LOGGER_ARGS} -x"
fi
if param compare SDLOG_MODE 4
then
    set LOGGER_ARGS "${LOGGER_ARGS} -a"
fi
if ! param compare SDLOG_MODE -1
then
    logger start -b ${LOGGER_BUF} -t ${LOGGER_ARGS}
fi

unset LOGGER_BUF
unset LOGGER_ARGS
unset PARAM_FILE
unset VEHICLE_TYPE

# Send boot complete signal via Mavlink
echo "\tINFO [init] boot_complete"
mavlink boot_complete